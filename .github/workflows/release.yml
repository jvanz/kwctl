name: kwctl release
on:
  push:
    tags:
    - 'v*'
env:
  CARGO_TERM_COLOR: always
jobs:

  ci:
    # A branch is required, and cannot be dynamic - https://github.com/actions/runner/issues/1493
    uses: kubewarden/kwctl/.github/workflows/tests.yml@main

  build-linux-binaries:
    name: Build linux binary
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        targetarch: [ "aarch64", "x86_64" ]
        include:
          - targetarch: aarch64
            arch: arm64
            rustflags: ""
          - targetarch: x86_64
            arch: amd64
            rustflags: "-C target-feature=+crt-static"
    permissions:
      packages: write
      id-token: write
    needs:
      - ci
    steps:
      - name: Configure Ubuntu repositories
        run: |
          sudo dpkg --add-architecture arm64

          sudo sed -i "s/deb h/deb [arch=amd64] h/g" /etc/apt/sources.list

          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy universe" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates universe" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy multiverse" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates multiverse" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security universe" /etc/apt/sources.list
          sudo sed -i "$ a deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security multiverse" /etc/apt/sources.list

          sudo apt update -y
      - name: Install Musl and configure gcc spec
        run: |
          sudo apt install -y musl-dev:${{ matrix.arch }}
          # patching the .spec file, as by default it has a bug where it tries to
          # set old_cpp_options but it already exists. using *+cpp_options achieves
          # the same desired functionality of appending preexisting options
          sudo sed -i 1d /usr/lib/${{ matrix.targetarch }}-linux-musl/musl-gcc.specs
          sudo sed -i "s/*cpp_options/+cpp_options/g" /usr/lib/${{ matrix.targetarch }}-linux-musl/musl-gcc.specs
          sudo sed -i "s/ %(old_cpp_options)//g" /usr/lib/${{ matrix.targetarch }}-linux-musl/musl-gcc.specs

      - name: Configure gcc spec for x86_64
        if: ${{ matrix.targetarch == 'x86_64' }}
        run: |
          # The cargo configuration to build static binaries is not working. Thus,
          # update the spec file to ensure that.
          sudo sed -i "s/-dynamic-linker.*/-no-dynamic-linker  -nostdlib %{shared:-shared} %{static:-static} %{rdynamic:-no-export-dynamic}/g" /usr/lib/${{ matrix.targetarch }}-linux-musl/musl-gcc.specs

      - uses: sigstore/cosign-installer@main

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install rust target
        run: rustup target add ${{ matrix.targetarch }}-unknown-linux-musl

      - name: Build kwctl
        env:
          CC: ${{ matrix.targetarch }}-linux-musl-gcc
          RUSTFLAGS: "-C link_arg=-lgcc -C link_arg=-specs -C link_arg=/usr/lib/${{ matrix.targetarch}}-linux-musl/musl-gcc.specs ${{ matrix.rustflags }}"
        run: |
          cargo build --release --target ${{ matrix.targetarch }}-unknown-linux-musl
          mv target/${{ matrix.targetarch }}-unknown-linux-musl/release/kwctl kwctl-linux-${{ matrix.targetarch }}

      - name: Sign kwctl
        run: cosign sign-blob kwctl-linux-${{ matrix.targetarch }} --output-certificate kwctl-linux-${{ matrix.targetarch}}.pem --output-signature kwctl-linux-${{ matrix.targetarch }}.sig
        env:
          COSIGN_EXPERIMENTAL: 1
      - run: zip -j9 kwctl-linux-${{ matrix.targetarch }}.zip kwctl-linux-${{ matrix.targetarch }} kwctl-linux-${{ matrix.targetarch }}.sig kwctl-linux-${{ matrix.targetarch }}.pem
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: kwctl-linux-${{ matrix.targetarch }}
          path: kwctl-linux-${{ matrix.targetarch }}.zip

  build-darwin-aarch64:
    name: Build darwin (aarch64) Apple Silicon binary
    runs-on: macos-latest
    permissions:
      id-token: write
    needs:
      - ci
    steps:
    - uses: actions/checkout@v2
    - uses: sigstore/cosign-installer@main
    - name: Setup rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-apple-darwin
        override: true
    - run: rustup target add aarch64-apple-darwin
    - name: Build kwctl
      run: cargo build --target=aarch64-apple-darwin --release
    - run: mv target/aarch64-apple-darwin/release/kwctl kwctl-darwin-aarch64
    - name: Sign kwctl
      run: cosign sign-blob kwctl-darwin-aarch64 --output-certificate kwctl-darwin-aarch64.pem --output-signature kwctl-darwin-aarch64.sig
      env:
        COSIGN_EXPERIMENTAL: 1
    - run: zip -j9 kwctl-darwin-aarch64.zip kwctl-darwin-aarch64 kwctl-darwin-aarch64.sig kwctl-darwin-aarch64.pem
    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: kwctl-darwin-aarch64
        path: kwctl-darwin-aarch64.zip

  build-darwin-x86_64:
    name: Build darwin (x86_64) binary
    runs-on: macos-latest
    permissions:
      id-token: write
    needs:
      - ci
    steps:
    - uses: actions/checkout@v2
    - uses: sigstore/cosign-installer@main
    - name: Setup rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - run: rustup target add x86_64-apple-darwin
    - name: Build kwctl
      run: cargo build --target=x86_64-apple-darwin --release
    - run: mv target/x86_64-apple-darwin/release/kwctl kwctl-darwin-x86_64
    - name: Sign kwctl
      run: cosign sign-blob kwctl-darwin-x86_64 --output-certificate kwctl-darwin-x86_64.pem --output-signature kwctl-darwin-x86_64.sig
      env:
        COSIGN_EXPERIMENTAL: 1
    - run: zip -j9 kwctl-darwin-x86_64.zip kwctl-darwin-x86_64 kwctl-darwin-x86_64.sig kwctl-darwin-x86_64.pem
    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: kwctl-darwin-x86_64
        path: kwctl-darwin-x86_64.zip

  build-windows-x86_64:
    name: Build windows (x86_64) binary
    runs-on: windows-latest
    permissions:
      id-token: write
    needs:
      - ci
    steps:
    - uses: actions/checkout@v2
    - uses: sigstore/cosign-installer@main
    - name: Setup rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - run: rustup target add x86_64-pc-windows-msvc
    - name: Build kwctl
      run: cargo build --target=x86_64-pc-windows-msvc --release
    - run: mv target/x86_64-pc-windows-msvc/release/kwctl.exe kwctl-windows-x86_64.exe
    - name: Sign kwctl
      run: cosign sign-blob kwctl-windows-x86_64.exe --output-certificate kwctl-windows-x86_64.pem --output-signature kwctl-windows-x86_64.sig
      env:
        COSIGN_EXPERIMENTAL: 1
    - run: |
        "/c/Program Files/7-Zip/7z.exe" a kwctl-windows-x86_64.exe.zip kwctl-windows-x86_64.exe kwctl-windows-x86_64.sig kwctl-windows-x86_64.pem
      shell: bash
    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: kwctl-windows-x86_64
        path: kwctl-windows-x86_64.exe.zip

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - build-linux-binaries
      - build-darwin-x86_64
      - build-darwin-aarch64
      - build-windows-x86_64
    steps:
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release kwctl ${{ github.ref }}
        draft: false
        prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}

    - name: Download linux-x86_64 binary
      uses: actions/download-artifact@v2
      with:
        name: kwctl-linux-x86_64
    - name: Publish linux-x86_64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_name: kwctl-linux-x86_64.zip
        asset_path: kwctl-linux-x86_64.zip
        asset_content_type: application/zip

    - name: Download linux-aarch64 binary
      uses: actions/download-artifact@v2
      with:
        name: kwctl-linux-aarch64
    - name: Publish linux-aarch64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_name: kwctl-linux-aarch64.zip
        asset_path: kwctl-linux-aarch64.zip
        asset_content_type: application/zip

    - name: Download darwin-x86_64 binary
      uses: actions/download-artifact@v2
      with:
        name: kwctl-darwin-x86_64

    - name: Download darwin-aarch64 binary
      uses: actions/download-artifact@v2
      with:
        name: kwctl-darwin-aarch64

    - name: Publish darwin-x86_64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_name: kwctl-darwin-x86_64.zip
        asset_path: kwctl-darwin-x86_64.zip
        asset_content_type: application/zip

    - name: Publish darwin-aarch64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_name: kwctl-darwin-aarch64.zip
        asset_path: kwctl-darwin-aarch64.zip
        asset_content_type: application/zip

    - name: Download windows-x86_64 binary
      uses: actions/download-artifact@v2
      with:
        name: kwctl-windows-x86_64
    - name: Publish windows-x86_64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_name: kwctl-windows-x86_64.exe.zip
        asset_path: kwctl-windows-x86_64.exe.zip
        asset_content_type: application/zip
